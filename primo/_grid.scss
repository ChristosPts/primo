@use "sass:math";

$grid-columns: 12;
// use a list when there is no need to aply a value to a key
$layout-values: center, space-between, space-around,start,end, space-evenly;
$item-aligns: center, start, end, baseline;

%container-layout {
    width: 100%;
    margin: 0 auto;
    box-sizing: border-box;
    position: relative;
}

// base layout classes

.container-full {
    @extend %container-layout;    
   
}

.container-lg {
    @extend %container-layout;
    max-width: 1600px;
    padding: 4px 24px;
    @include sm-max{
        padding: 4px 8px;
    }
}

.container {
    @extend %container-layout;
    max-width: 1200px;
    padding: 4px 24px;
    @include sm-max{
        padding: 4px 8px;
    }
}

.container-sm {
    @extend %container-layout;
    max-width: 576px;
    padding: 4px 16px;
}

.row {
    flex-flow: row wrap;
    position: relative;
}

// justify content classes
@each $val in $layout-values {
    .justify-#{$val}{
        justify-content: $val;
    }
}

// align content classes
@each $val in $item-aligns {
    .align-#{$val}{
        align-items: $val;
    }
}

@each $val in $item-aligns {
    .align-self-#{$val}{
        align-self: $val;
    }
}


// col classes
@include xs {
    @for $i from 1 through $grid-columns {
        .col-xs-#{$i} {
            box-sizing: border-box;
            flex-grow: 0;
            // calculate with of each column
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include sm {
    @for $i from 1 through $grid-columns {
        .col-sm-#{$i} {
            box-sizing: border-box;
            flex-grow: 0;
            // calculate with of each column
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include md {
    @for $i from 1 through $grid-columns {
        .col-md-#{$i} {
            box-sizing: border-box;
            flex-grow: 0;
            // calculate with of each column
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include lg {
    @for $i from 1 through $grid-columns {
        .col-lg-#{$i} {
            box-sizing: border-box;
            flex-grow: 0;
            // calculate with of each column
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include xl {
    @for $i from 1 through $grid-columns {
        .col-xl-#{$i} {
            box-sizing: border-box;
            flex-grow: 0;
            // calculate with of each column
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include xxl {
    @for $i from 1 through $grid-columns {
        .col-xxl-#{$i} {
            box-sizing: border-box;
            flex-grow: 0;
            // calculate with of each column
            width: math.div($i * 100%, $grid-columns);
        }
    }
}